<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>heapq</title>
      <link href="/2019/10/13/heapq/"/>
      <url>/2019/10/13/heapq/</url>
      
        <content type="html"><![CDATA[<h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><ul><li><p>队列：FIFO，先进先出</p></li><li><p>优先队列：队列中每个元素都分配一个优先权值，队列的出队顺序按照优先权值来划分，高者优先或者低者优先。这样优先队列必须有两个基本操作：入队和（按照优先权值）出队（以优先级高的先出来），简单点说就是插入或者删除元素的时候，元素自动排序，实现原理二叉堆的操作</p></li><li><p>应用：打印机的任务调度和操作系统的进程调度。</p></li><li><p>优先想到的就是用排序函数和队列的一些简单方法来实现优先队列。但是在列表中插入一个数据的复杂度是O(n),因为你插入的时候要移动数据，列表的排序复杂度是O(nlogn),我们可以用别的方法来降低复杂度。比如：二叉堆实现优先队列，二叉堆可以将复杂度保持在O(logn)。置于为什么请看二叉堆的结构。</p></li></ul><h4 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h4><ul><li><p>特殊的二叉树，对一般的二叉树提出了结构性和堆序性的要求</p><ol><li><p>结构性：二叉堆是一个完全二叉树（除最后一层每层结点达到最大值，最后一层叶子节点连续集中在左侧）</p></li><li><p>堆序性：大根堆：所有结点值大于其后裔结点值 。  （父大于子）  </p><pre><code>小根堆：所有节点值均小于其后裔结点值。（父小于子）</code></pre></li><li><p>使用单列表实现二叉树，对于结点列表中下标为p，那么左子节点为2p，右节点2p+1</p><p>举个例子（如图）：</p><p><img src="https://img-blog.csdnimg.cn/20191013215136755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ol></li></ul><p>【注意】数组的第一个索引0空着不用，通常我们把第一个元素设置为0，结点i的儿子是2i和2i+1</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BinHeap</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>heapList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#完全树的单列表表示，以及下标，记录堆的大小</span>    <span class="token keyword">def</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#从列表生成二叉堆</span>            i <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># 优化（至于为什么暂时没搞懂）</span>            self<span class="token punctuation">.</span>currentSize<span class="token operator">=</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>heapList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>alist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#i永远不会得0，不会访问到这个元素列表从0访问，树从1，添加0后保证了树的性质</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>percDown<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                i<span class="token operator">-=</span><span class="token number">1</span></code></pre><h4 id="优先队列的出队"><a href="#优先队列的出队" class="headerlink" title="优先队列的出队"></a>优先队列的出队</h4><p><strong>相当于堆的删除操作</strong></p><p>每次出队操作==返回堆顶元素+删除堆顶元素，删除堆顶元素后需要保证二叉堆的结构性和堆序性，这个操作过程叫做堆调整</p><ul><li>出队删除堆顶元素然后让最后一个元素补充，此时需要调整（下沉）<br>如下方所示：<br><img src="https://img-blog.csdnimg.cn/20191008225034198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/20191008225241679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191008225349279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">percDown</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#下沉</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#循环下沉直到结束</span>            mc <span class="token operator">=</span> self<span class="token punctuation">.</span>minChild<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#记录两个孩子的最小值的位置mc</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#比较孩子和父亲的大小</span>                tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#如果父亲大，交换使得大数下沉</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span> <span class="token operator">=</span> tmp            i<span class="token operator">=</span>mc    <span class="token keyword">def</span> <span class="token function">minChild</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回两个子节点的最小值的位置</span>        <span class="token keyword">if</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">:</span>            <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true">#和percdown中的while条件相呼应，说明结束</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">delMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回堆中的最小项同时删除</span>        retval <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#记录最小值</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#将最后一个值放在根部</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">-=</span><span class="token number">1</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结点释放掉</span>        self<span class="token punctuation">.</span>percDown<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根部元素需要调整为满足堆得性质</span>        <span class="token keyword">return</span> retval</code></pre><h4 id="优先队列的入队"><a href="#优先队列的入队" class="headerlink" title="优先队列的入队"></a>优先队列的入队</h4><p><strong>相当于堆的插入操作</strong></p><ul><li>入队——插入到末尾进行调整简称（上浮）<br>如图感受一波：<br><img src="https://img-blog.csdnimg.cn/20191008225727217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019100822575364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW5fNTIzMw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">percUP</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#小数上浮,i为下标</span>        <span class="token keyword">while</span> i<span class="token operator">//</span><span class="token number">2</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#不断上浮</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#新节点小于父子节点</span>                tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp     <span class="token comment" spellcheck="true">#交换</span>        i<span class="token operator">=</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token comment" spellcheck="true">#继续和上面的比较</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#插入结点的值</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">+=</span><span class="token number">1</span>        self<span class="token punctuation">.</span>percUP<span class="token punctuation">(</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调整堆得次序小数上浮</span></code></pre><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''coding=utf-8'''</span><span class="token keyword">class</span> <span class="token class-name">BinHeap</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>heapList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">#完全树的单列表表示，以及下标，记录堆的大小</span>    <span class="token keyword">def</span> <span class="token function">percUP</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#小数上浮,i为下标</span>        <span class="token keyword">while</span> i<span class="token operator">//</span><span class="token number">2</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#不断上浮</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#新节点小于父子节点</span>                tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp     <span class="token comment" spellcheck="true">#交换</span>        i<span class="token operator">=</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token comment" spellcheck="true">#继续和上面的比较</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#插入结点的值</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">+=</span><span class="token number">1</span>        self<span class="token punctuation">.</span>percUP<span class="token punctuation">(</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调整堆得次序小数上浮</span>    <span class="token keyword">def</span> <span class="token function">percDown</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#下沉</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#循环下沉直到结束</span>            mc <span class="token operator">=</span> self<span class="token punctuation">.</span>minChild<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#记录两个孩子的最小值的位置mc</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#比较孩子和父亲的大小</span>                tmp <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#如果父亲大，交换使得大数下沉</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span>                self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>mc<span class="token punctuation">]</span> <span class="token operator">=</span> tmp            i<span class="token operator">=</span>mc    <span class="token keyword">def</span> <span class="token function">minChild</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回两个子节点的最小值的位置</span>        <span class="token keyword">if</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">:</span>            <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true">#和percdown中的while条件相呼应，说明结束</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">delMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回堆中的最小项同时删除</span>        retval <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#记录最小值</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>heapList<span class="token punctuation">[</span>self<span class="token punctuation">.</span>currentSize<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#将最后一个值放在根部</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">-=</span><span class="token number">1</span>        self<span class="token punctuation">.</span>heapList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#结点释放掉</span>        self<span class="token punctuation">.</span>percDown<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根部元素需要调整为满足堆得性质</span>        <span class="token keyword">return</span> retval    <span class="token keyword">def</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#从列表生成二叉堆</span>        i <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># 优化（至于为什么暂时没搞懂）</span>        self<span class="token punctuation">.</span>currentSize<span class="token operator">=</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>heapList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>alist<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#i永远不会得0，不会访问到这个元素列表从0访问，树从1，添加0后保证了树的性质</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>percDown<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            i<span class="token operator">-=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#举个例子感受一下吧</span>bh <span class="token operator">=</span> BinHeap<span class="token punctuation">(</span><span class="token punctuation">)</span>bh<span class="token punctuation">.</span>buildHeap<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bh<span class="token punctuation">.</span>delMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bh<span class="token punctuation">.</span>delMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bh<span class="token punctuation">.</span>delMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bh<span class="token punctuation">.</span>delMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bh<span class="token punctuation">.</span>delMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/12/hello-world/"/>
      <url>/2019/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
